AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Template para desplegar Lambda Telegram Bot y sus recursos

Globals:
  Function:
    Timeout: 10
    Runtime: python3.11
    MemorySize: 256
  Api:
    Auth:
      DefaultAuthorizer: NONE
    BinaryMediaTypes:  # Add support for binary media types
      - '*/*'
    Cors:  # Enable CORS
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
  # IAM Role for API Gateway to write logs to CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [apigateway.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${AWS::StackName}-api"
      RetentionInDays: 7

  # API Gateway with CloudWatch Logs enabled
  TelegramBotApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Auth:
        ApiKeyRequired: false
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'

  # API Gateway Account for CloudWatch Logs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn
    DependsOn: 
      - ApiGatewayCloudWatchLogsRole
      - TelegramBotApi

  TelegramBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: telegram-bot-giobot
      Handler: app.lambda_handler
      CodeUri: function.zip
      Runtime: python3.11
      MemorySize: 256
      Timeout: 10
      Description: Bot de Telegram en Lambda desplegado vía CloudFormation
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN: !Ref TelegramToken
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Policies:
        - AWSLambdaBasicExecutionRole   # Log a CloudWatch
      Events:
        ApiGatewayInvoke:
          Type: Api
          Properties:
            Path: /webhook
            Method: POST
            RestApiId: !Ref TelegramBotApi

Parameters:
  TelegramToken:
    Type: String
    Description: Token de tu bot de Telegram
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true

Outputs:
  LambdaFunctionArn:
    Description: ARN de la función Lambda creada
    Value: !GetAtt TelegramBotFunction.Arn
  
  ApiGatewayUrl:
    Description: URL del API Gateway para el webhook de Telegram
    Value: !Sub "https://${TelegramBotApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook"
    
  CloudWatchLogGroup:
    Description: CloudWatch Log Group for API Gateway
    Value: !Ref ApiGatewayLogGroup