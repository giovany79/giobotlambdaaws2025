name: Deploy Telegram Bot Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: giobot

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install dependencies for Lambda
      run: |
        # Create build directory
        BUILD_DIR="build"
        rm -rf "$BUILD_DIR"
        mkdir -p "$BUILD_DIR"
        
        # Copy necessary files
        cp app.py "$BUILD_DIR/"
        cp requirements.txt "$BUILD_DIR/"
        
        # Debug: Show contents of requirements.txt
        echo "Contents of requirements.txt:"
        cat requirements.txt
        
        # Install dependencies in Lambda-compatible environment
        docker run --rm \
            -v "$PWD/$BUILD_DIR":/var/task \
            --entrypoint /bin/bash \
            public.ecr.aws/lambda/python:3.11 \
            -c "
                cd /var/task && \
                echo 'Installing pip...' && \
                pip install --upgrade pip && \
                echo 'Installing requirements...' && \
                pip install --no-cache-dir -r requirements.txt -t . --platform manylinux2014_x86_64 --only-binary=:all: && \
                echo 'Verifying pandas installation...' && \
                python -c 'import pandas; print(f\"Pandas version: {pandas.__version__}\")' && \
                echo 'Cleaning up...' && \
                rm -rf __pycache__ && \
                find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true && \
                find . -type f -name '*.pyc' -exec rm -f {} +
            "
        
        # Verify files were installed
        echo "Contents of build directory:"
        ls -la "$BUILD_DIR"
        
        # Create deployment package
        cd "$BUILD_DIR"
        zip -r ../function.zip .
        cd ..
        
        # Move zip to CloudFormation directory
        mkdir -p infraestructure/cloudformation
        mv function.zip infraestructure/cloudformation/

    - name: Package Lambda with CloudFormation
      run: |
        aws cloudformation package \
          --template-file infraestructure/cloudformation/template.yaml \
          --s3-bucket giobotlambdaaws2025 \
          --output-template-file packaged-template.yaml

    - name: Deploy Lambda with CloudFormation
      run: |
        aws cloudformation deploy \
          --template-file packaged-template.yaml \
          --stack-name telegram-bot-stack \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides TelegramToken=${{ secrets.TELEGRAM_BOT_TOKEN }} OpenAIApiKey=${{ secrets.OPENAI_API_KEY }} Handler=app.lambda_handler